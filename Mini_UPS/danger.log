1. When the amazon send pickup request to the ups, while the ups do not create the accout, the foreign key of username in table user_packages would be empty;
solution: the backend would automatically insert the username into the database, and user can reset the password in the front end;

2.the son threads are still running while the parent threads finish, so that the child threads would become zombie threads. 
solution: std::vector<std::thread> threads; threads.emplace_back(function,parameter); for (auto& t : threads) {t.join();}

3.the database table name generated by Django ORM is different from the name we write, so that insert, select, update will fails.
solution: change the table in cpp backend;

4.RAII: Use RAII to automatically manage allocated resources, using unique_ptr for the allocated.

5.Exception Handling: No throw guarantee, we have some blocks will throw Exception.

6.We use simple instance design model and lock to guarantee the thread-safe.

7.At least once ACK handling: we design a global unordered_set to store the ack, and use store.find()==store.end() to check whether we have to send it again;
